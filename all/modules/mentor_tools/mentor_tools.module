<?php
/**
 * @file
 * Module file for mentor_tools.
 */
 
function mentor_tools_field_info() {
	return array(
			'mentor_tools' => array(
					'label' => t('Mentor Slider'),
					'description' => t("Add social media icons through the Field Type API."),
					'default_widget' => 'mentor_tools',
					'default_formatter' => 'mentor_tools', // This doesn't *have* to be the same name as default_widget's value, this is only coincidence
			),
	);
}

function mentor_tools_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, $errors) {
	foreach ($items as $delta => $item) {

	}
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function mentor_tools_field_is_empty($item, $field) {
	$temp = array_keys($field['columns']);
	$key = array_shift($temp);
	return empty($item[$key]);
}

function mentor_tools_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
	// Make sure that each file which will be saved with this object has a
	// permanent status, so that it will not be removed when temporary files are
	// cleaned up.

	switch ($instance['widget']['type']) {
		case 'mentor_tools':

			foreach ($items as $delta => $item) {
				if ($item['img'] != 0) {
					$file = file_load($item['img']);
					if (!$file->status) {
						$file->status = FILE_STATUS_PERMANENT;
						file_save($file);
						file_usage_add($file, 'mentor_tools', 'mentor_tools', $item['img']);
					}
				}
			}
			break;

	}
}

function mentor_tools_field_widget_info() {
	return array(
			'mentor_tools' => array(
					'label' => t('Mentor Slider'),
					'field types' => array('mentor_tools'),
			),
	);
}

function mentor_tools_field_formatter_info() {
	return array(
			'mentor_tools' => array(
					'label' => t('Mentor Slider'),
					'field types' => array('mentor_tools'),
			),
	);
}

function mentor_tools_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
	$i = 0;

	foreach ($items as $delta => $item) {

		if (!empty($item['img'])) {
			$icon = '<img src="'.file_create_url(file_load($item['img'])->uri).'" />'; } else { $icon = '&nbsp;';
		}
		
		if (!empty($item['link'])) {
			$slide = '<a href="'.$item['link'].'" target="_blank">'.$icon.'</a>';
		} else {
			$slide = $icon;
		}
		
		if (!empty($item['delay'])) {
			$delay = ' data-delay="'.$item['delay'].'"';
		} else {
			$delay = '';
		}
		
		switch ($display['type']) {
			case 'mentor_tools':
				if($i = 0) {
					$element[$delta] = array('#markup' => '<div class="visible"'.$delay.'>'.$icon.'</div>');
				} else {
					$element[$delta] = array('#markup' => '<div'.$delay.'>'.$icon.'</div>');
				}
			break;
		}
		
		$i++;
	}

	return $element;
}

function mentor_tools_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
	switch ($instance['widget']['type']) {
		case 'mentor_tools':
				
			$settings = $form_state['field'][$instance['field_name']][$langcode]['field']['settings'];
			$field_name = $instance['field_name'];

			$element['img'] = array(
					'#type' => 'managed_file',
					'#title' => t('Image upload'),
					'#upload_validators' => array(
							'file_validate_extensions' => array(0 => 'png jpg jpeg gif'),
					),
					'#upload_location' => 'public://mentor/',
					'#description' => t("Upload an image."),
					'#states' => array(
							'visible' => array(      // Action to take: check the checkbox.
									':input[name="'.$field_name.'[und]['.$delta.'][layer]"]' => array('value' => 'img'),
							),
					),
			);

			$element['delay'] = array(
					'#type' => 'textfield',
					'#title' => t('Delay:'),
					'#description' => t("Time in seconds before jumping to next slide, if set to 0 or not included, the slideshow is disabled so slides can only be changed by using controls (or gestures on mobile)."),
			);
			
			$element['link'] = array(
					'#type' => 'textfield',
					'#title' => t('Link:'),
					'#description' => t("Paste markup in the textarea above."),
			);

			// Loop through all the element children and set a default value if we have one. Then set HTML wrappers.
			foreach (element_children($element) as $element_key) {
				$value = isset($items[$delta][$element_key]) ? $items[$delta][$element_key] : '';
				$element[$element_key]['#default_value'] = $value;
			}

			break;
	}

	return $element;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mentor_tools_block_info() {
	
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  $blocks['footer_main_menu'] = array(
    // info: The name of the block.
    'info' => t('Footer: Main Menu'),
    'status' => TRUE,
    'region' => 'footer_lower',  // Not usually provided.
  );

  return $blocks;
}


function mentor_footer_block_content() {
	$output = '<b>Main Menu</b>';
	return $output;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mentor_tools_block_view($delta = '') {
	
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'footer_main_menu':
      $block['subject'] = t("Main Menu");
      $block['content'] = mentor_footer_block_content();
    break;
  }
  
  return $block;
}
